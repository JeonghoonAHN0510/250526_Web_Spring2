[ 암호화(Encryption) ]
- 자료를 보호하기 위해서 사람이 이해하기 어려운 문자로 변환하는 것
- 목적 : 자료보호, 신뢰성 확보, 무결성 유지 등
- 사용처 : 계정 비밀번호, HTTPS, 금융거래 등
- 주요 용어
    1) 평문 : 암호화되기 전의 원래 데이터
    2) 암호문 : 암호화된 데이터
    3) 암호화 : 평문을 암호문으로 변환하는 것
    4) 복호화 : 암호문을 평문으로 변환하는 것
    5) 단방향 암호화 : 평문을 암호문으로 변환하고, 다시 평문으로 변환이 불가능한 것
    6) 양방향 암호화 : 평문을 암호문으로 변환하고, 다시 평문으로 변환이 가능한 것
    7) 해시함수 : 서로 다른 데이터를 '고정된 길이'의 데이터로 변환하는 함수
        -> 같은 데이터를 넣으면, 같은 결과가 반환된다.
        -> 같은 결과를 반환하지만, 복호화가 불가능하다.
    8) 솔트(salt) : 암호화할 때 사용되는 랜덤값
        -> 같은 데이터를 넣으면, 다른 결과가 반환된다.
- 주요 알고리즘
    1) BCrypt : 해시함수 기반의 단방향 암호화 -> 비밀번호에서 활용
    2) SHA-256 : 256비트 해시함수 기반의 단방향 암호화 -> 파일, 전자서명에서 활용
    3) TLS : 데이터 송수신 암호화, HTTPS의 기반 -> 웹통신에서 활용

[ BCrypt ]
- 해시함수를 이용하여 주로 비밀번호를 암호화할 때 사용된다.
- 특징
    1) 솔트를 활용하여 같은 평문이 다른 암호문을 반환한다.
    2) 반복 연산이 적용되어 의도적으로 검증 속도를 늦춰 보안을 강화한다.
    3) 단방향 암호화여서 복호화가 불가능하다.
    -> 따라서 평문 비교가 아닌 암호문 비교를 통해 검증한다.
- 형태 : $2a$10$69bMrChodVYxOcvM/cUo7evsho3hw6YBJT9yepHudwBlIvi7KlV0.
    1) $2a : BCrypt 버전
    2) $10 : 반복 연산수, 2의 제곱근
    3) 69bMrChodVYxOcvM/cUo7e : salt(22글자)
    4) vsho3hw6YBJT9yepHudwBlIvi7KlV0. : 해시값(31글자)
- 사용법(Service에서 사용)
    1) 라이브러리 설치
        implementation 'org.springframework.security:spring-security-crypto:6.4.4'
    2) BCrypt 객체 생성
        private final BCryptPasswordEncoder BCrypt객체 = new BCryptPasswordEncoder();
    3) 암호화 진행
        String 암호문 = BCrypt객체.encode(평문);
    4) 검증(복호화는 불가능)
        boolean 검증결과 = BCrypt객체.matches(평문, 암호문);