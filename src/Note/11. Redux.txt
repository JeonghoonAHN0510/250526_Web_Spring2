[ Redux ]
- 전역 상태관리 라이브러리
- 서로 다른 컴포넌트 간의 효율적인 상태(값)를 공유한다.
- 상태를 저장하는 저장소를 만들고, 서로 다른 컴포넌트 간의 일관적인 상태를 유지한다.
- 활용처 : 로그인 상태, 테마 등등
    1. 전역변수가 필요할 때
    2. 여러 개의 컴포넌트에서 동일한 변수를 공유할 때
    3. 컴포넌트 간 props 전달이 복잡해질 때
- 설치 : npm i @reduxjs/toolkit, npm i react-redux
- 핵심 용어
    1. Store : 상태들을 관리하는 중앙 저장소, 모든 상태(전역변수)들을 저장한다.
        -> App.jsx 1개당 1개로 관리
        -> configureStore()
    2. Slice : 상태와 reducer를 정의하는 곳
        -> Action을 통해 상태변경이 되면, 리렌더링된다.
        -> createSlice()
    3. Reducer : 상태를 변경하는 함수
    4. Action : 상태를 변경하기위해 Store에 보내는 함수
- 실행순서
    0. 상위 컴포넌트에 <Provider store={내가만든스토어}>를 통해 store 공급
    1. 일반 컴포넌트(login 페이지)에서 action 실행
        -> dispatch(login())
    2. action이 Store에 전달
        -> const dispatch = useDispatch();
        -> dispatch(상태변경함수(매개변수));
        -> Slice : 상태변경함수(state, action) => { action.payload로 들어온다. }
    3. Store에 등록된 Reducer를 찾아 상태를 수정한다.
        -> const { 상태명 } = useSelector( (state) => state.전역변수명 );
- Redux는 전역 상태이지만, 영구 저장을 하지 않는다.
    -> Client Side Rendering : Persistence -> 세션/로컬 스토리지
    -> Server Side Rendering : 서버와 통신을 통해 영구 저장(axios)
    -> Next.js : 

[ export / import ]
- export default 값 : JSX 파일 내 하나의 default 값 내보내기
    -> import 변수명 from '파일경로'

- export const 변수명 = 값 : JSX 파일 내 여러개의 값 내보내기
    -> import { 가져올변수명 } from '파일경로'

[ persist ]
- Redux의 상태는 새로고침하면, 초기값으로 돌아간다.
    -> 새로고침해도 값을 유지하기 위해서 사용
- LocalStorage, SessionStorage를 사용해서 저장
- 설치 : npm i redux-persist
- 핵심용어
    1) persistConfig    : persist 설정 객체
        -> const 옵션 = { key:'식별이름', storage }
        -> const persist슬라이스 : persistReducer( 옵션, 슬라이스 );
    2) persistGate      : 저장소에서 상태를 불러올 때, 지연해주는 컴포넌트????
        -> <PersistGate loading={최초로딩값} persistor={persist스토어}>
- LocalStorage : import storage from 'redux-persist/lib/storage'
- SessionStorage : import storageSession from 'redux-persist/lib/storage/session'