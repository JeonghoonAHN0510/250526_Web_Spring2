[ ALTER ]
- 기존 테이블의 구조 변경
- 사용법
    속성 추가 : ALTER TABLE 테이블명 ADD COLUMN 새로운속성명 타입;
    속성 수정 : ALTER TABLE 테이블명 MODIFY COLUMN 수정할속성명 타입;
    속성명 수정 : ALTER TABLE 테이블명 CHANGE COLUMN 기존속성명 새로운속성명 타입;
    속성 삭제 : ALTER TABLE 테이블명 DROP COLUMN 삭제할속성명;
    PK 추가 : ALTER TABLE 테이블명 ADD CONSTRAINT 제약조건명 PRIMARY KEY(PK속성명);
    PK 삭제 : ALTER TABLE 테이블명 DROP PRIMARY KEY;
    FK 추가 : ALTER TABLE 테이블명 ADD CONSTRAINT 제약조건명 FOREIGN KEY(FK속성명) REFERENCES 참조테이블(PK속성명);
    FK 삭제 : ALTER TABLE 테이블명 DROP FOREIGN KEY 삭제할제약조건명;
    제약조건 추가 : ALTER TABLE 테이블명 ADD CONSTRAINT 제약조건명 제약조건(속성명);
    제약조건 삭제 : ALTER TABLE 테이블명 DROP CONSTRAINT 삭제할제약조건명;
- 필드 확인 : SHOW COLUMNS FROM 테이블명;
- 제약조건 확인 : SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS;

[ SUBQUERY ]
- SELECT 안에서 SELECT를 중첩하여 사용하는 것
- 형식 : SELECT (SELECT) FROM (SELECT) WHERE(SELECT);

[ Transaction ]
- 여러 SQL 작업들을 하나의 묶음으로 처리하여 모두 성공하면 COMMIT, 하나라도 실패하면 ROLLBACK하는 기능
- 목적 : 데이터의 무결성 유지와 안정성을 보장
- 명령어
    1) 워크벤치에서 자동 커밋 해제 : SET AUTOCOMMIT = 0
    2) 트랜잭션 시작 : START TRANSACTION
    3) 최종 저장 : COMMIT
    4) COMMIT 전까지 되돌리기 : ROLLBACK
    5) 임시 저장 : SAVEPOINT 저장지점명
    6) 저장지점으로 되돌리기 : ROLLBACK TO 저장지점명
- Java와의 비교
    1) Spring Boot : @Transactional + RuntimeException

[ View ]
- 실제 데이터를 저장하지 않고, SELECT 쿼리 결과를 임시로 저장하는 가상의 테이블
- 목적 : 복잡한 SQL의 재사용, 보안 및 권한 지정
- 일부 View에서는 수정이 불가능하다.
- 명령어
    1) 생성 : CREATE (OR REPLACE) VIEW 뷰이름 AS 쿼리문
    2) 수정 : ALTER VIEW 뷰이름 AS 새로운쿼리문
    3) 삭제 : DROP VIEW IF EXISTS 뷰이름
    4) 뷰 목록 확인 : SHOW FULL TABLES WHERE TABLE_TYPE = 'VIEW'

[ DCL ]
- 데이터베이스의 사용자 계정 생성, 권한 부여 및 회수 등을 관리하는 명령어
- 계정(개발자)마다 데이터베이스 접근 권한을 분리하여 관리하면서 보안 강화
- 명령어
    1) 계정 생성 : CREATE USER '계정명'@'허용IP' IDENTIFIED BY '비밀번호';
    -> 허용도메인 : localhost(로컬환경), %(모든IP허용), 192.168.0.1(특정한IP)
    2) 권한 부여 : GRANT 권한 ON 데이터베이스명.테이블|뷰명 TO '계정명'@'허용IP';
    -> 모든 권한 : ALL PRIVILEGES
    3) 권한 회수 : REVOKE 권한 ON 데이터베이스명.테이블|뷰명 TO '계정명'@'허용IP';
    4) 권한 확인 : SHOW GRANT FOR '계정명'@'허용IP';
    5) 비밀번호 수정 : ALTER USER '계정명'@'허용IP' IDENTIFIED BY '새로운비밀번호';
    6) 계정 삭제 : DROP USER '계정명'@'허용IP';
    7) 모든 계정 확인 : SELECT * FROM mysql.user;

[ INDEX ]
- 데이터를 특정 필드를 기준으로 검색을 빠르게 하기위한 색인
- 대용량 데이터의 SELECT·JOIN·정렬 등의 속도 향상
- INSERT/DELETE/UPDATE 등의 속도 저하
- PK속성은 기본적으로 인덱스를 갖는다.
- 명령어
    1) 단일 인덱스 생성 : CREATE INDEX 인덱스명 ON 테이블명(속성명);
    2) 복합 인덱스 생성 : CREATE INDEX 인덱스명 ON 테이블명(속성명1, 속성명2);
    3) 인덱스 확인 : SHOW INDEX FROM 테이블명;
    4) 인덱스 삭제 : DROP INDEX 인덱스면 ON 테이블명;
    5) 실행 계획 분석 : EXPLAIN ANALYZE 쿼리문;
    6) 자연어 처리 : CREATE FULLTEXT INDEX 인덱스명 ON 테이블명(속성명);
    -> SELECT * FROM 테이블명 WHERE MATCH(속성명) AGAINST(속성값);
    -> LONGTEXT, TEXT, CHAR, VARCHAR만 가능