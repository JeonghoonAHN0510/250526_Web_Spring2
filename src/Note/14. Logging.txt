[ Logging ]
- 프로그램 실행 중 발생하는 정보를 기록하는 행위
- '저장' 또는 효율적인 구분으로 유지보수를 진행한다.
- Spring에서의 Logging
    -> Lombok에서 제공하는 @Log4j2 어노테이션을 활용하여 컨트롤러와 서비스에서 사용
    -> @Log4j2 class Controller{}
- 주요 객체 및 메소드
    1) log.debug() : 개발 및 테스트 단계에서 사용
    2) log.info()  : 상태를 확인하기 위해 사용 -> 개발/운영 단계
    3) log.warn()  : 경고를 확인하기 위해 사용 -> 운영 단계
    4) log.error() : 예외를 확인하기 위해 사용 -> 운영 단계
- 로그 출력 설정 : application.properties
    -> level : debug < info < warn < error
    -> Spring은 info가 기본값
    -> logging.level.java이하경로 = level
- 로그 파일 저장 위치 설정
    -> logging.file.name=폴더명/파일명.log
- 로그 파일 설정
    1) 로그 파일 최대 크기
        -> logging.logback.rollingpolicy.max-file-size
    2) 로그 파일 최대 개수
        -> logging.logback.rollingpolicy.max-history
- 스프링 내부 로그 줄이기
    spring.main.log-startup-info=false
    logging.level.org.springframework.boot.web=warn
    logging.level.org.springframework.boot.web.embedded.tomcat=warn
    logging.level.org.apache.catalina=warn
    logging.level.org.apache.coyote=warn
    logging.level.org.springframework.web=warn
- 로그 형식 설정
    -> logging.pattern.file : 파일 로그 형식
    -> logging.pattern.console : 콘솔 로그 형식
    1) %msg : 로그메시지
    2) %n : 줄바꿈
    3) %d{ y M d H m s } : 날짜/시간{연 월 일 시 분 초}
    4) %level : 레벨
    5) %logger : 경로/클래스