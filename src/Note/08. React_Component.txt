[ Component ]
- React에서의 독립적이고 재사용 가능한 함수
- HTML + JS + CSS를 하나의 컴포넌트로 구성할 수 있다.
- 만드는 방법
    1) 컴포넌트 생성
        function 컴포넌트명( props ){ return };
    2) 컴포넌트 내보내기
        export default 컴포넌트명;
- 컴포넌트 불러오기
    1) 다른 jsx일 때
        import 컴포넌트명 from 'jsx 파일경로'
        < 컴포넌트명 />
    2) 같은 jsx일 때
        < 컴포넌트명 />
- return에서의 여러줄 : ( )와 <>로 감싸 작성한다.

[ JSX ]
- 컴포넌트 안에서 HTML과 비슷한 문법을 사용할 수 있도록 만든 확장 문법
- 주의할 점 : JSX 문법은 브라우저가 해석할 수 없기에 React의 렌더링이 필수!
- 특징
    1) JSX는 HTML처럼 보이지만, HTML과 다르다.
        -> **가상 DOM**을 사용하기 때문에
    2) 마크업/컴포넌트의 close가 필수이다.
        -> <input>  (X)
        -> <input/> (O)
    3) return값 전체를 감싸는 상위 요소(DOM)가 필수이다.
        -> <> </> or <div></div>
        -> 2줄 이상이라면, 관례적으로 소괄호로 감싼다.
    4) JS표현식을 사용할 때, { }을 사용한다.
        -> <div> { JS표현식 } </div>
        -> 단, 선언/생성은 불가능하다.
    5) HTML 주석이 불가능하다.
        -> { /* 주석내용 */ }으로 사용한다.

[ props ]
- 부모 컴포넌트가 자식 컴포넌트에게 데이터를 전달하는 매개변수
- 컴포넌트의 재사용성, 데이터 전달 역할
- 특징
    1. 읽기 전용(= 물려받은 props는 수정이 불가능)
    2. 단방향(= 부모 -> 자식만 가능)
- 사용법
    function 부모컴포넌트(props){
        return(
            <>
            <자식컴포넌트 속성명1={값} 속성명2={값} />
            </>
        ) // return end
    } // func end
    방법1) props로 전달받기
        function 자식컴포넌트(props){
            props.속성명1;
            props.속성명2;
            return(
                <></>
            ) // return end
        } // func end
    방법2) **props를 곧바로 구조 분해 할당하기**
        function 자식컴포넌트({속성명1, 속성명2}){
            return(
                <></>
            ) // return end
        } // func end

[ HTML 이벤트 ]
- 순수 HTML : onclick, onchange ···
    -> 직접 함수를 처리
    -> onclick="함수명()"

- 가상 HTML : onClick, onChange ···
    -> 함수 전달 역할
    -> onClick={함수명}
    -> onClick={ (e) => { 함수명() } }