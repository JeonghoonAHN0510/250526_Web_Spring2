[ Transaction ]
- 데이터베이스에서 여러 연산(DML)을 하나의 논리적인 작업 단위로 묶는 것
    -> 이체 + 주문, 등록 등등
    -> 여러 insert/update/delete들이 하나의 로직으로 처리될 때
- 신뢰성과 안정성 보장
    * 데이터 무결성 보장 : 여러 연산 중 하나라도 실패하면, 전체를 실패 처리한다.
    1) 원자성 : 여러 연산이 모두 성공해야만 결과를 반영한다.
    2) 일관성 : 트랜잭션 이후 데이터는 항상 일관된 상태여야한다.
    3) 독립성 : 다른 트랜잭션과 영향을 받지 않는다.
    4) 지속성 : 트랜잭션이 성공적으로 완료되면, 결과는 영구적이다.
- 핵심용어
    1) commit    : 트랜잭션이 정상 완료되어 최종 완료하는 것
    2) rollback  : 실행 중 오류가 발생하여 이전 상태로 되돌리는 것
    3) savepoint : 특정 시점까지의 작업을 임시 저장하여, 부분 rollback하는 것
- Spring에서의 적용 방법 -> AOP의 한 방법
    * 비지니스 로직(Service)에서 주로 적용
    1) @Transactional void method(){}   -> 각각의 메소드에 적용
    2) @Transactional class Service{}   -> 클래스 전체에 적용
- rollback 기준 : 기본적으로 RuntimeException(실행 예외)가 발생해야만 롤백된다.
    1) @Transactional( rollbackFor = Exception.class ) : 모든 예외에서 롤백
    2) @Transactional( rollbackFor = 특정예외클래스명.class ) : 특정 예외에서만 롤백