[ Lambda ] (JAVA8 이상 문법)
- 익명 함수를 간결하게 표현하는 방법
    -> JAVA : () -> {}
    -> JS : () => {}
- 메소드 선언 없이 구현부만 간단하게 작성하기 위해 사용
- 사용처
    1. stream API
    2. JAVA GUI
- 주요 인터페이스
    1. Function<T, R>   : T(입력)를 받아서, R(결과)을 반환한다.
        -> .apply(T)
    2. Supplier<T>      : 입력 없이, T(결과)를 반환한다.
        -> .get()
    3. Consumer<T>      : T(입력)을 받고, 반환값은 없다.
        -> .accept(T)
    4. Predicate<T>     : T(입력)을 받아서 결과를 boolean으로 반환한다.
        -> .test(T)
- 활용
    1) 추상메소드 구현체
    2) 컬렉션 프레임워크

[ stream API ]
- 데이터의 연속된 흐름을 처리하는 방식을 지원한다.
- 데이터 흐름 : [ 매개변수 ] ---> [ 중간연산 ] ---> [ 최종연산 ]
- 주요 연산
    1. 중간연산
        1) map      : 반환
        2) filter   : 반환 + 조건
        3) sort     : 정렬
        4) distinct : 중복 제거
        5) limit    : 추출 데이터 개수 제한
    2. 최종연산
        1) forEach  : 단순 반복
        2) collect
        3) reduce



- 클래스 vs 인터페이스(**다형성**)
- 배열 vs 컬렉션프레임워크
- stream vs 일반for문